{"version":3,"sources":["helpers/helpers.js","components/Input/Input.jsx","components/Form/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["regexpName","regexpEmail","regexpLogin","regexpPassword","fields","unstickWords","string","toUpperCase","slice","replace","Input","this","props","label","value","onBlur","handler","onChange","e","state","type","placeholder","className","message","React","Component","Form","firstName","firstNameMessage","isFirstNameValid","lastName","lastNameMessage","isLastNameValid","email","emailMessage","isEmailValid","date","dateMessage","isDateValid","login","loginMessage","isLoginValid","password","passwordMessage","isPasswordValid","repeatPassword","repeatPasswordMessage","isRepeatPasswordValid","formValidMessage","isFormValid","handleSubmit","preventDefault","firstNameHandler","lastNameHandler","emailHandler","dateHandler","loginHandler","passwordHandler","repeatPasswordHandler","setState","validFirstName","test","length","validName","validEmail","dateNow","Date","toISOString","split","currentAge","getTime","Math","round","validLogin","validPassword","generateTypeForInput","elem","prevProps","prevState","console","log","inputs","map","idx","target","onSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.192c42b4.chunk.js","sourcesContent":["export const regexpName = /^[a-zA-Z\\u00C0-\\u00ff]+$/;\r\nexport const regexpEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nexport const limit = 16;\r\nexport const regexpLogin = /^[0-9a-zA-Z]+$/;\r\nexport const regexpPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/;\r\nexport const fields = ['firstName', 'lastName', 'email', 'date', 'login', 'password', 'repeatPassword'];\r\n\r\nexport const unstickWords = (string) => {\r\n    return ((string[0].toUpperCase() + string.slice(1))\r\n        .replace(/([A-Z])/g, ' $1')).slice(1);\r\n}\r\n","import React from 'react';\r\nimport {unstickWords} from \"../../helpers/helpers\";\r\n\r\nexport class Input extends React.Component {\r\n    render() {\r\n        return (\r\n            <label>\r\n                {unstickWords(this.props.label)}\r\n                <input\r\n                    value={this.props.value}\r\n                    onBlur={this.props.handler}\r\n                    onChange={(e) => {\r\n                        this.props.state(e);\r\n                        this.props.handler();\r\n                    }}\r\n                    type={this.props.type}\r\n                    placeholder= {unstickWords(this.props.label)}\r\n                    className={`input ${this.props.message ? 'input-error' : ''}`}\r\n                />\r\n                {this.props.message && <div className=\"error-message\">\r\n                    {this.props.message}\r\n                </div>}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {\r\n    fields,\r\n    regexpName,\r\n    regexpEmail,\r\n    limit,\r\n    regexpLogin,\r\n    regexpPassword,\r\n} from '../../helpers/helpers';\r\nimport {Input} from \"../Input/Input\";\r\n\r\nexport class Form extends React.Component {\r\n    state = {\r\n        firstName: '',\r\n        firstNameMessage: '',\r\n        isFirstNameValid: false,\r\n\r\n        lastName: '',\r\n        lastNameMessage: '',\r\n        isLastNameValid: false,\r\n\r\n        email: '',\r\n        emailMessage: '',\r\n        isEmailValid: false,\r\n\r\n        date: '',\r\n        dateMessage: '',\r\n        isDateValid: false,\r\n\r\n        login: '',\r\n        loginMessage: '',\r\n        isLoginValid: false,\r\n\r\n        password: '',\r\n        passwordMessage: '',\r\n        isPasswordValid: false,\r\n\r\n        repeatPassword: '',\r\n        repeatPasswordMessage: '',\r\n        isRepeatPasswordValid: false,\r\n\r\n        formValidMessage: '',\r\n        isFormValid: false,\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.firstNameHandler();\r\n        this.lastNameHandler();\r\n        this.emailHandler();\r\n        this.dateHandler();\r\n        this.loginHandler();\r\n        this.passwordHandler();\r\n        this.repeatPasswordHandler();\r\n\r\n        const {\r\n            isFirstNameValid, isLastNameValid, isEmailValid, isDateValid,\r\n            isLoginValid, isPasswordValid, isRepeatPasswordValid} = this.state;\r\n\r\n        const valid = isFirstNameValid && isLastNameValid && isEmailValid\r\n            && isDateValid && isLoginValid && isPasswordValid && isRepeatPasswordValid;\r\n\r\n        if (valid) {\r\n            this.setState({\r\n                formValidMessage: 'All is clearly!',\r\n                isFormValid: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                formValidMessage: 'Not all fields are correct!',\r\n                isFormValid: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    firstNameHandler = () => {\r\n        const validFirstName = regexpName.test(this.state.firstName);\r\n\r\n        if (!this.state.firstName.length) {\r\n            this.setState({firstNameMessage: `First name can't be empty!`})\r\n        } else if (!validFirstName) {\r\n            this.setState({firstNameMessage: `First name doesn't correct!`})\r\n        } else {\r\n            this.setState({\r\n                firstNameMessage: '',\r\n                isFirstNameValid: true\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.firstName !== prevState.firstName) {\r\n            console.log('firstName has changed.');\r\n            this.firstNameHandler();\r\n        } else if (this.state.lastName !== prevState.lastName) {\r\n            console.log('lastName has changed.');\r\n            this.lastNameHandler();\r\n        } else if (this.state.email !== prevState.email) {\r\n            console.log('email has changed.');\r\n            this.emailHandler();\r\n        } else if (this.state.date !== prevState.date) {\r\n            console.log('date has changed.');\r\n            this.dateHandler();\r\n        } else if (this.state.login !== prevState.login) {\r\n            console.log('login has changed.');\r\n            this.loginHandler();\r\n        } else if (this.state.password !== prevState.password) {\r\n            console.log('password has changed.');\r\n            this.passwordHandler();\r\n        } else if (this.state.repeatPassword !== prevState.repeatPassword) {\r\n            console.log('repeatPassword has changed.');\r\n            this.repeatPasswordHandler();\r\n        }\r\n    }\r\n\r\n    lastNameHandler = () => {\r\n        const validName = regexpName.test(this.state.lastName);\r\n\r\n        if (!this.state.lastName.length) {\r\n            this.setState({lastNameMessage: `Last name can't be empty!`})\r\n        } else if (!validName) {\r\n            this.setState({lastNameMessage: `Last name doesn't correct!`})\r\n        } else {\r\n            this.setState({\r\n                lastNameMessage: '',\r\n                isLastNameValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    emailHandler = () => {\r\n        const validEmail = regexpEmail.test(this.state.email);\r\n\r\n        if (!this.state.email.length) {\r\n            this.setState({emailMessage: `Email can't be empty!`})\r\n        } else if (!validEmail) {\r\n            this.setState({emailMessage: `Email doesn't correct!`})\r\n        } else {\r\n            this.setState({\r\n                emailMessage: '',\r\n                isEmailValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    dateHandler = () => {\r\n        let dateNow = new Date().toISOString().split('T')[0];\r\n        let currentAge = (new Date(dateNow).getTime() - new Date(this.state.date).getTime()) / 1000 / 60 / 60 / 24;\r\n        currentAge = Math.round(currentAge / 365);\r\n\r\n        if (!this.state.date.length) {\r\n            this.setState({dateMessage: `Date of birth can't be empty!`})\r\n        } else if (currentAge < limit) {\r\n            this.setState({dateMessage: `Age of the user is less than 16!`})\r\n        } else {\r\n            this.setState({\r\n                dateMessage: '',\r\n                isDateValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    loginHandler = () => {\r\n        const validLogin = regexpLogin.test(this.state.login);\r\n\r\n        if (!this.state.login.length) {\r\n            this.setState({loginMessage: `Login can't be empty!`})\r\n        } else if (!validLogin) {\r\n            this.setState({loginMessage: `Login doesn't correct!`})\r\n        } else {\r\n            this.setState({\r\n                loginMessage: '',\r\n                isLoginValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    passwordHandler = () => {\r\n        const validPassword = regexpPassword.test(this.state.password);\r\n\r\n        if (!this.state.password.length) {\r\n            this.setState({passwordMessage: `Password can't be empty!`})\r\n        } else if (!validPassword) {\r\n            this.setState({passwordMessage: `Password doesn't correct!`})\r\n        } else if (this.state.password.length < 6) {\r\n            this.setState({passwordMessage: 'Password must be at least 6 characters!'})\r\n        } else {\r\n            this.setState({\r\n                passwordMessage: '',\r\n                isPasswordValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    repeatPasswordHandler = () => {\r\n        if (!this.state.repeatPassword.length) {\r\n            this.setState({repeatPasswordMessage: `Repeat password!`})\r\n        } else if (this.state.password !== this.state.repeatPassword) {\r\n            this.setState({repeatPasswordMessage: `Password repeated doesn't correct!`})\r\n        } else {\r\n            this.setState({\r\n                repeatPasswordMessage: '',\r\n                isRepeatPasswordValid: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    generateTypeForInput = (elem) => {\r\n        switch (elem) {\r\n            case 'email':\r\n                return 'email'\r\n            case 'date':\r\n                return 'date'\r\n            case 'password':\r\n            case 'repeatPassword':\r\n                return 'password'\r\n            default:\r\n                return 'text'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputs = fields.map((elem, idx) => {\r\n            return (\r\n                <Input\r\n                    key={idx}\r\n                    label={`${elem}`}\r\n                    value={this.state[`${elem}`]}\r\n                    message={this.state[`${elem}Message`]}\r\n                    handler={this[`${elem}Handler`]}\r\n                    state={(e) => this.setState({[`${elem}`]: e.target.value})}\r\n                    type={`${this.generateTypeForInput(elem)}`}\r\n                />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='register-form'>\r\n                {inputs}\r\n                <button type='submit' className=\"btn\">Register</button>\r\n\r\n                {this.state.formValidMessage &&\r\n                <div\r\n                    className={`${this.state.isFormValid ? 'success-form' : 'error-form'}`}\r\n                >\r\n                    {this.state.formValidMessage}\r\n                </div>}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './App.scss';\r\nimport './styles/reset.scss';\r\nimport {Form} from './components/Form/Form';\r\n\r\nfunction App() {\r\n    return (\r\n        <Form />\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}